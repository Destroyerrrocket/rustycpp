//! Evaluator of the macro integer constant expression ast.
use std::fmt::Debug;

#[derive(Debug, Clone)]
#[doc(hidden)]
pub enum PreTokenIf {
    Num(i128),
    LParen,
    RParen,
    Colon,
    Question,
    Tilde,
    Exclamation,
    Plus,
    Minus,
    Star,
    Slash,
    Percent,
    Caret,
    Ampersand,
    Pipe,
    DoubleEqual,
    ExclamationEqual,
    Less,
    Greater,
    LessEqual,
    GreaterEqual,
    Spaceship,
    DoubleAmpersand,
    DoublePipe,
    DoubleLess,
    DoubleGreater,
    DoublePlus,
    DoubleMinus,
    Comma,
    And,
    Or,
    Xor,
    Not,
    Bitand,
    Bitor,
    Compl,
}

impl std::fmt::Display for PreTokenIf {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Num(n) => write!(f, "{n}"),
            Self::LParen => write!(f, "("),
            Self::RParen => write!(f, ")"),
            Self::Colon => write!(f, ":"),
            Self::Question => write!(f, "?"),
            Self::Tilde => write!(f, "~"),
            Self::Exclamation => write!(f, "!"),
            Self::Plus => write!(f, "+"),
            Self::Minus => write!(f, "-"),
            Self::Star => write!(f, "*"),
            Self::Slash => write!(f, "/"),
            Self::Percent => write!(f, "%"),
            Self::Caret => write!(f, "^"),
            Self::Ampersand => write!(f, "&"),
            Self::Pipe => write!(f, "|"),
            Self::DoubleEqual => write!(f, "=="),
            Self::ExclamationEqual => write!(f, "!="),
            Self::Less => write!(f, "<"),
            Self::Greater => write!(f, ">"),
            Self::LessEqual => write!(f, "<="),
            Self::GreaterEqual => write!(f, ">="),
            Self::Spaceship => write!(f, "<=>"),
            Self::DoubleAmpersand => write!(f, "&&"),
            Self::DoublePipe => write!(f, "||"),
            Self::DoubleLess => write!(f, "<<"),
            Self::DoubleGreater => write!(f, ">>"),
            Self::DoublePlus => write!(f, "++"),
            Self::DoubleMinus => write!(f, "--"),
            Self::Comma => write!(f, ","),
            Self::And => write!(f, "and"),
            Self::Or => write!(f, "or"),
            Self::Xor => write!(f, "xor"),
            Self::Not => write!(f, "not"),
            Self::Bitand => write!(f, "bitand"),
            Self::Bitor => write!(f, "bitor"),
            Self::Compl => write!(f, "compl"),
        }
    }
}

impl PreTokenIf {
    #[doc(hidden)]
    pub fn stringToPreTokenIfOperator(s: &str) -> Self {
        match s {
            r"(" => Self::LParen,
            r")" => Self::RParen,
            r":" => Self::Colon,
            r"?" => Self::Question,
            r"~" => Self::Tilde,
            r"!" => Self::Exclamation,
            r"+" => Self::Plus,
            r"-" => Self::Minus,
            r"*" => Self::Star,
            r"/" => Self::Slash,
            r"%" => Self::Percent,
            r"^" => Self::Caret,
            r"&" => Self::Ampersand,
            r"|" => Self::Pipe,
            r"==" => Self::DoubleEqual,
            r"!=" => Self::ExclamationEqual,
            r"<" => Self::Less,
            r">" => Self::Greater,
            r"<=" => Self::LessEqual,
            r">=" => Self::GreaterEqual,
            r"<=>" => Self::Spaceship,
            r"&&" => Self::DoubleAmpersand,
            r"||" => Self::DoublePipe,
            r"<<" => Self::DoubleLess,
            r">>" => Self::DoubleGreater,
            r"++" => Self::DoublePlus,
            r"--" => Self::DoubleMinus,
            r"," => Self::Comma,
            r"and" => Self::And,
            r"or" => Self::Or,
            r"xor" => Self::Xor,
            r"not" => Self::Not,
            r"bitand" => Self::Bitand,
            r"bitor" => Self::Bitor,
            r"compl" => Self::Compl,
            _ => unreachable!(),
        }
    }
}
